/*-*-sql-*-*******************************************************************
 * AMOS
 *
 * Author: (c) 2011 Thanh Truong, UDBL
 *
 * Description:  Lab 3 skeleton (student)
 *
 ****************************************************************************/

/* --------------------------------------------------------------------------
 Define a new data type WineSample
 -------------------------------------------------------------------------- */

create type WineSample;

/* Each WineSample has an identifier number stored
   in the function 'wsId' */
create function wsId(WineSample ws) -> Integer id as stored;

/* Each WineSample has a feature vector of numbers 
   stored in the function 'features': */
create function features(WineSample ws) -> Vector of Number f as stored;

/* -----------------------------------------------------------------------
 Populate winsamples from a CSV file
 ------------------------------------------------------------------------ */
/* Attributes 2 to 12 in our CSV file are wine quality features */
/* Attributes 0 in our CSV file is identifier of wine sample */
set :csvpos = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};

create function addwinesample(Vector of Number csvrow, Vector of Number csvpos)
                            -> Boolean
    /* Add one new wine sample to the database */
    as begin
        declare WineSample ws;
  create WineSample(wsId, features) 
  instances ws (csvrow[0], project(csvrow, csvpos));
       end;

/* Read all samples from the CVS file into the database */
addwinesample(cast(read_ntuples('winequalitysample.csv') as Vector of Number),
              :csvpos);

count(select s from WineSample s);
/* Should return 2939! */

/* -----------------------------------------------------------------------
 Database now populated
 ------------------------------------------------------------------------ */

/* Enable foreign functions in Java */
enable_java(); 

/* Exercise 1. Register with Amos a new index type named 'kdtree' */
register_exindextype('KDTREE', FALSE);

/* Exercise 2. Redefine Mexima foreign function for the KD-tree index structure */

create function kdtree_make() -> Integer xtId as
  foreign "JAVA:KDTreeIndex/kdtree_make";

create function kdtree_put(Integer xtId, Object key, Object val)->Object as
  foreign "JAVA:KDTreeIndex/kdtree_put";

create function kdtree_get(Integer xtId, Object key)->Bag of Object as
  foreign "JAVA:KDTreeIndex/kdtree_get";

create function kdtree_delete(Integer xtId, Object key, Object val)->Object as
  foreign "JAVA:KDTreeIndex/kdtree_delete";

create function kdtree_clear(Integer xtId)->Object as
  foreign "JAVA:KDTreeIndex/kdtree_clear";

/* Exercise 3. Define an index of type kdtree for the second parameter of the stored function winequalitysamples. */

create_index("features", "f", "KDTREE", "multiple");

/* Exercise 4. Investigate execution plans and test KD-tree indexing by answerin the following questions:
  a. What kind of index is used in the execution plan of allsamples?
  b. Why?
  c. What kind of index is used in the execution plan of get_sample_example?
  d. Why? */

create function get_sample_example(Number wsId) -> WineSample ws
  as select ws where wsId(ws) = wsId;

create function allsamples(Vector of Number f) -> WineSample ws
  as select ws where features(ws)=f;

pc("get_sample_example");
pc("allsamples");


/* Exercise 5. blablabla */

create function kdtreeProximitySearch(Integer xid, Vector of Number f, Number distance) -> Bag of Object as
  foreign 'JAVA:KDTreeIndex/kdtreeProximitySearch';

/*create function kdtree_similarity_fn(Integer xtId, Vector of Number x, Number distance) -> Object as
  foreign "JAVA:KDTreeIndex/kdtreeProximitySearch";*/

/* Now, we should be able to run ... */